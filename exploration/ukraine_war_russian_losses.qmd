---
title: "Ukraine War: Russian Losses"
author: "Cormac Nolan"
date: "3/17/2022"
output: html_document
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-tools: true
editor_options: 
  markdown: 
    wrap: 100
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(forecast)
library(corrplot)
library(here)
```

## Import

Data sourced from the [Kyiv Independent Twitter feed](https://twitter.com/KyivIndependent/media) who
sourced it from the Ukrainian Defense Ministry.

These are imperfect estimates, given during chaotic wartime conditions, from an institution that is
would be incentivised to inflate its figures. This isn't to say that the Defense Ministry is
consciously inflating them, but it bears remembering when looking at this data.

```{r cars}
source(here("data/ukraine_defense_ministry_russian_loss_estimates.R"))

campaign_length = as.integer(max(russian_losses$report_date) - min(russian_losses$report_date))
campaign_length_weeks = ceiling(campaign_length / 7)

russian_losses
 
```

## Exploration

```{r pressure, echo=FALSE}
 
russian_losses %>% 
  filter(report_date == as.character(max(russian_losses$report_date))) %>% 
  select(-report_date) %>% 
  purrr::map_df(.f=function(x) x / campaign_length)
```

```{r, fig.height=7}
russian_losses %>% 
  select(report_date, tanks, artillery_pieces, armoured_personel_carriers, vehicles) %>% 
  tidyr::pivot_longer(cols = where(~is.numeric(.x)), names_to="loss_type", values_to="loss_value") %>% 
  ggplot(aes(report_date, loss_value, group=loss_type, colour=loss_type)) +
  geom_line() +
  facet_wrap(~loss_type, ncol = 2)

```

```{r, fig.height=7}
russian_losses %>% 
  select(report_date, soldiers, armoured_personel_carriers, vehicles) %>% 
  tidyr::pivot_longer(cols = where(~is.numeric(.x)), names_to="loss_type", values_to="loss_value") %>% 
  ggplot(aes(report_date, loss_value, group=loss_type, colour=loss_type)) +
  geom_line() +
  facet_wrap(~loss_type, ncol = 3)

```

```{r, fig.height=7}
russian_losses %>% 
  select(report_date, planes, helicopters, artillery_pieces, mlrs, aa_systems) %>% 
  tidyr::pivot_longer(cols = where(~is.numeric(.x)), names_to="loss_type", values_to="loss_value") %>% 
  ggplot(aes(report_date, loss_value, group=loss_type, colour=loss_type)) +
  geom_line() +
  facet_wrap(~loss_type, ncol = 2)

```

## Rates

First we need to apply interpolation, linear is fine for now.

```{r, fig.height=7}

russian_losses_all_dates <-
  dplyr::tibble(report_date = min(russian_losses$report_date) + 0:campaign_length) %>%
  left_join(russian_losses, by="report_date")


russian_losses_all_dates
```

```{r, fig.height=7}
russian_losses_all_dates <- 
  russian_losses_all_dates %>% 
  mutate(across(where(~is.numeric(.x)), .fns=forecast::na.interp)) %>%
  mutate(across(where(~is.numeric(.x)), .fns=as.numeric)) %>% 
  mutate(across(where(~is.numeric(.x)), .fns=round))

russian_losses_all_dates
```

```{r}
russian_losses_all_dates <- 
  russian_losses_all_dates %>% 
  mutate(campaign_week_number = c(0, rep(1:campaign_length_weeks, each=7)[1:(campaign_length)]))
  
russian_losses_all_dates
```

```{r}
daily_diff <- function(val){
  val - dplyr::lag(val) 
}

rate_plot <- function(df, loss_column){
  .loss_column = enquo(loss_column)
  
  formatted_title <- .loss_column %>% 
    quo_name() %>% 
    stringr::str_replace_all("_", " ") %>% 
    stringr::str_to_title()
    
  df %>% 
    select(report_date, {{loss_column}}, campaign_week_number) %>% 
    mutate(across(where(~is.numeric(.x)), .fns=daily_diff)) %>% 
    tidyr::drop_na() %>% 
    ggplot(aes(report_date, {{loss_column}})) +
    geom_smooth(se=TRUE, span=0.5) +
    geom_bar(stat = "identity", alpha = 0.3) +
    labs(
      title = formatted_title, 
      x = "Date",
      y="Loss Rate")
}


rate_plot(russian_losses_all_dates, soldiers)
  

```

```{r}

rate_plot(russian_losses_all_dates, vehicles)

```

```{r}

rate_plot(russian_losses_all_dates, tanks)

```

```{r}

rate_plot(russian_losses_all_dates, armoured_personel_carriers)

```

```{r, fig.height=7}
rate_plot(russian_losses_all_dates, artillery_pieces)

```

```{r, fig.height=7}
rate_plot(russian_losses_all_dates, planes)

```

```{r, fig.height=7}
rate_plot(russian_losses_all_dates, uav)

```

```{r, fig.height=7}
rate_plot(russian_losses_all_dates, helicopters)

```

## Seasonal Decomposition to Check for Report Effects (Tanks)

Although it does find a 7-day seasonality pattern, and the trend line is useful, I would be
skeptical if there the fit was finding anything useful at all.

```{r}
russian_losses_all_dates %>% 
  filter(report_date >= "2022-04-01") %>% 
  select(report_date, armoured_personel_carriers) %>% 
  mutate(across(where(~is.numeric(.x)), .fns=daily_diff)) %>% 
  tidyr::drop_na() %>% 
  arrange(report_date) %>% 
  pull(armoured_personel_carriers) %>% 
  ma(order=5) %>% 
  # ts(frequency = 7) %>% 
  # stl(t.window=13, s.window="periodic", robust=TRUE) %>% 
  # decomose() %>% 
  forecast::autoplot() +
  ggplot2::ylim(0, 50) +
  labs(title="APC Losses: 5-Day Moving Average of Daily Rate",
       x = "Days", y = "APC Loss")


```

```{r}
ar_fit_apc_losses <- 
  russian_losses_all_dates %>% 
  filter(report_date >= "2022-03-01") %>% 
  select(report_date, armoured_personel_carriers) %>% 
  mutate(across(where(~is.numeric(.x)), .fns=daily_diff)) %>% 
  tidyr::drop_na() %>% 
  arrange(report_date) %>% 
  pull(armoured_personel_carriers) %>% 
  auto.arima(seasonal=FALSE, trace=TRUE)

ar_fit_apc_losses
```

```{r}
ar_fit_apc_losses %>% checkresiduals()
```

Especially since the auto-correlations don't show significant spikes at 7 and 14-day intervals as
you would expect. The only thing it really shows is that recent values are correlated with current
values, suggesting that loss intensity tends to ramp up and down over several days. A moving average
model or similar like LOESS is perfectly fine for summarising this kind of timeseries.

```{r}
russian_losses_all_dates %>% 
  select(report_date, tanks) %>% 
  mutate(across(where(~is.numeric(.x)), .fns=daily_diff)) %>% 
  tidyr::drop_na() %>% 
  arrange(report_date) %>% 
  pull(tanks) %>%
  forecast::ggAcf()
```

## Distribution Analysis

The following histogram of the daily tank loss values hints at a Poisson distribution of event
counts (tank losses) over the discrete time intervals (days), which would be expected.

```{r}
russian_losses_all_dates %>% 
  select(report_date, tanks) %>% 
  mutate(across(where(~is.numeric(.x)), .fns=daily_diff)) %>% 
  tidyr::drop_na() %>% 
  arrange(report_date) %>% 
  ggplot(aes(tanks)) +
  geom_histogram(bins = 20) +
  labs(title="Histogram of Russian Daily Tank Loss Estimates",
       x="Tank Losses")

```

## Correlations

The only one that doesn't have significant correlation is cruise missiles, because they only get
added from May onward.

```{r, fig.width=8, fig.height=8}
losses_correlations <- russian_losses_all_dates %>% 
  select(-report_date, -campaign_week_number) %>% 
  cor()

losses_correlations_test <- russian_losses_all_dates %>% 
  select(-report_date, -campaign_week_number) %>% 
  cor.mtest(conf.level = 0.95)

ord <- corrMatOrder(losses_correlations, order = "AOE")
corrplot(losses_correlations[ord, ord],
         p.mat = losses_correlations_test$p,
         insig = "p-value")
```
